{"version":3,"sources":["webpack:///src/app/retailer-register/retailer-register.page.html","webpack:///src/app/retailer-register/retailer-register-routing.module.ts","webpack:///src/app/retailer-register/retailer-register.module.ts","webpack:///src/app/retailer-register/retailer-register.page.scss","webpack:///src/app/retailer-register/retailer-register.page.ts"],"names":["routes","path","component","RetailerRegisterPageRoutingModule","imports","forChild","exports","RetailerRegisterPageModule","declarations","RetailerRegisterPage","nacCtrl","afAuth","afstore","alertController","emailComposer","name","email","password","cpassword","location","city","state","zipcode","retailerType","Error","length","pickupTime","undefined","createUserWithEmailAndPassword","res","doc","user","uid","set","isVerified","isRetailer","retailerUID","listings","orders","Date","Email","send","SecureToken","To","From","Subject","Body","then","message","console","log","presentEmailConfirmation","presentAlertCheck","emailConfirmation","newEmail","to","subject","body","isHtml","isAvailable","available","error","open","navigateRoot","presentAlert","errorMessage","promise","Promise","resolve","resolveFunction","create","header","buttons","text","handler","alert","present","date","toString","selector","template"],"mappings":"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","file":"retailer-register-retailer-register-module-es5.js","sourcesContent":["export default \"<ion-header style=\\\"text-align: center\\\">\\r\\n  <ion-toolbar color=\\\"primary\\\" mode=\\\"ios\\\">\\r\\n    <ion-buttons slot=\\\"start\\\">\\r\\n      <ion-back-button [text]=\\\"Back\\\" defaultHref=\\\"initial-page\\\"></ion-back-button>\\r\\n    </ion-buttons> \\r\\n    <ion-title>\\r\\n      Registration\\r\\n    </ion-title>     \\r\\n  </ion-toolbar>\\r\\n</ion-header>\\r\\n\\r\\n<ion-content fullscreen>\\r\\n  <br>\\r\\n  <ion-list>\\r\\n    <ion-item>\\r\\n      <ion-label>Pick Up Time</ion-label>\\r\\n      <ion-datetime display-format=\\\"h:mm A\\\" picker-format=\\\"h:mm A\\\" [(ngModel)]=\\\"pickupTime\\\" (ionChange)=\\\"setPickupTime(this.pickupTime)\\\"></ion-datetime>\\r\\n    </ion-item>\\r\\n    <ion-item>\\r\\n      <ion-label position = \\\"floating\\\">\\r\\n          Name\\r\\n        </ion-label>\\r\\n        <ion-input autocapitalize='sentences' type = \\\"text\\\" [(ngModel)]=\\\"name\\\"></ion-input>\\r\\n    </ion-item>\\r\\n    <ion-item>\\r\\n    <ion-label position = \\\"floating\\\">\\r\\n        Email Address\\r\\n      </ion-label>\\r\\n      <ion-input type = \\\"text\\\" [(ngModel)]=\\\"email\\\"></ion-input>\\r\\n  </ion-item>\\r\\n  <ion-item>\\r\\n    <ion-label position = \\\"floating\\\">\\r\\n        Address Line 1\\r\\n      </ion-label>\\r\\n      <ion-input autocapitalize='sentences' type = \\\"text\\\" [(ngModel)]=\\\"location\\\"></ion-input>\\r\\n  </ion-item>\\r\\n  <ion-item>\\r\\n    <ion-label position = \\\"floating\\\">\\r\\n        City\\r\\n      </ion-label>\\r\\n      <ion-input autocapitalize='sentences' type = \\\"text\\\" [(ngModel)]=\\\"city\\\"></ion-input>\\r\\n  </ion-item>\\r\\n  <ion-item>\\r\\n    <ion-label position = \\\"floating\\\">\\r\\n        State\\r\\n      </ion-label>\\r\\n      <ion-input autocapitalize='sentences' type = \\\"text\\\" [(ngModel)]=\\\"state\\\"></ion-input>\\r\\n  </ion-item>\\r\\n  <ion-item>\\r\\n    <ion-label position = \\\"floating\\\">\\r\\n        Zipcode\\r\\n      </ion-label>\\r\\n      <ion-input type = \\\"text\\\" [(ngModel)]=\\\"zipcode\\\"></ion-input>\\r\\n  </ion-item>\\r\\n  <ion-item>\\r\\n    <ion-label position = \\\"floating\\\">\\r\\n        Retailer Type\\r\\n      </ion-label>\\r\\n      <ion-input autocapitalize='sentences' type = \\\"text\\\" [(ngModel)]=\\\"retailerType\\\"></ion-input>\\r\\n  </ion-item>\\r\\n  \\r\\n  <ion-item>\\r\\n    <ion-label position = \\\"floating\\\">\\r\\n        Password\\r\\n      </ion-label>\\r\\n      <ion-input type=\\\"password\\\" [(ngModel)]=\\\"password\\\"></ion-input>\\r\\n  </ion-item>\\r\\n  <ion-item>\\r\\n    <ion-label position = \\\"floating\\\">\\r\\n      Confirm Password\\r\\n    </ion-label>\\r\\n    <ion-input type=\\\"password\\\" [(ngModel)]=\\\"cpassword\\\"></ion-input>\\r\\n</ion-item>\\r\\n</ion-list>\\r\\n  \\r\\n<div style=\\\"text-align: center\\\">\\r\\n  <br>\\r\\n<ion-button expand=\\\"block\\\" fill=\\\"solid\\\" Size = \\\"large\\\" color=\\\"primary\\\" (click)=\\\"register()\\\">Sign Up</ion-button>\\r\\n</div>\\r\\n</ion-content>\\r\\n\\r\\n<!-- TODO: make sign up button inside footer -->\\r\\n\\r\\n\";","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { RetailerRegisterPage } from './retailer-register.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: RetailerRegisterPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class RetailerRegisterPageRoutingModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { RetailerRegisterPageRoutingModule } from './retailer-register-routing.module';\r\n\r\nimport { RetailerRegisterPage } from './retailer-register.page';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    RetailerRegisterPageRoutingModule\r\n  ],\r\n  declarations: [\r\n    RetailerRegisterPage\r\n  ]\r\n})\r\nexport class RetailerRegisterPageModule {}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3JldGFpbGVyLXJlZ2lzdGVyL3JldGFpbGVyLXJlZ2lzdGVyLnBhZ2Uuc2NzcyJ9 */\";","import { Component, OnInit } from '@angular/core';\r\nimport { AngularFireAuth } from '@angular/fire/auth';\r\nimport { AngularFirestore } from '@angular/fire/firestore';\r\nimport { AlertController, NavController } from '@ionic/angular';\r\nimport { EmailComposer } from '@ionic-native/email-composer/ngx';\r\n\r\ndeclare var Email: any;\r\n\r\n\r\n@Component({\r\n  selector: 'app-retailer-register',\r\n  templateUrl: './retailer-register.page.html',\r\n  styleUrls: ['./retailer-register.page.scss'],\r\n})\r\nexport class RetailerRegisterPage implements OnInit {\r\n  name: string = \"\";\r\n  email: string = \"\";\r\n  password: string = \"\";\r\n  cpassword: string = \"\";\r\n  location: string = \"\";\r\n  city: string = \"\";\r\n  state: string = \"\";\r\n  zipcode: string = \"\";\r\n  retailerType: string = \"\";\r\n  pickupTime; \r\n\r\n  constructor(private nacCtrl: NavController, public afAuth: AngularFireAuth, public afstore: AngularFirestore, public alertController: AlertController, public emailComposer: EmailComposer) { }\r\n\r\n  ngOnInit() { \r\n  \r\n  }\r\n\r\n  async register() {\r\n    \r\n    try{\r\n      const { name, email, password, cpassword, location, retailerType} = this\r\n      if(password !== cpassword){      \r\n        throw new Error('Passwords Do Not Match');\r\n      } \r\n      if(name.length==0){\r\n        throw new Error('Please Enter a Name');\r\n      }  \r\n      if(location.length==0){\r\n        throw new Error('Please Enter an Address');\r\n      } \r\n      if(retailerType.length==0){\r\n        throw new Error('Please Enter Retailer Type (Restaurant, Food Truck, Cafe)');\r\n      } \r\n      if(this.pickupTime == undefined){\r\n        throw new Error('Please Enter Pickup Time');\r\n      } \r\n      \r\n        const res = await this.afAuth.createUserWithEmailAndPassword(email, password)\r\n        this.afstore.doc(`users/${res.user.uid}`).set({\r\n          email,\r\n          name,\r\n          password,\r\n          isVerified: false,\r\n          isRetailer: true,\r\n          retailerUID: res.user.uid,\r\n          location: this.location + \", \" + this.city + \", \" + this.state + \" \" + this.zipcode,\r\n          retailerType,\r\n          listings: [],\r\n          orders: [],\r\n          pickupTime: new Date(this.pickupTime)\r\n        })\r\n      \r\n      //https://accounts.google.com/b/0/DisplayUnlockCaptcha\r\n\r\n      Email.send({\r\n        SecureToken : \"c11c8a65-d4f9-45b7-8c2a-61f9c48e0ea7\",\r\n        To : 'goodfoodinnova@gmail.com',\r\n        From : 'goodfoodinnova@gmail.com',\r\n        Subject : \"New Retailer Verification\",\r\n        Body : 'Hello, please verify retailer: ' + name + ' with email: ' + email + ' and uid: ' + res.user.uid + '. Thank you!'\r\n      }).then(\r\n        async message => { \r\n          if(message == \"OK\"){\r\n            console.log(message)\r\n            this.presentEmailConfirmation(\"A message has been sent to ensure your account is verified!\")\r\n          }\r\n          else{\r\n            console.log(\"SMTP.js Error: \" + message)\r\n              const emailConfirmation = await this.presentAlertCheck();\r\n\r\n              if (emailConfirmation) {\r\n\r\n              let newEmail = {\r\n                to: 'goodfoodinnova@gmail.com',\r\n                subject: 'New Retailer Verification',\r\n                body: 'Hello, please verify retailer: ' + name + ' with email: ' + email + ' and uid: ' + res.user.uid + '. Thank you!',\r\n                isHtml: true,\r\n              }\r\n\r\n              this.emailComposer.isAvailable().then((available: boolean) => {\r\n                if(available) {\r\n                  console.log(\"isAvailable\");\r\n                }\r\n              }).catch((error) => { console.log('EmailComposer Error: ' + error.message) });\r\n              this.emailComposer.open(newEmail);\r\n            }\r\n          }         \r\n        \r\n      });    \r\n      this.nacCtrl.navigateRoot([\"./retailertabs/retailertabs/retailertab1\"])   \r\n  }catch(error){\r\n    this.presentAlert(error.message);\r\n  }\r\n}\r\n\r\npublic async presentAlert(errorMessage) : Promise<boolean> {\r\n  let resolveFunction: (confirm: boolean) => void;\r\n  const promise = new Promise<boolean>(resolve => {\r\n    resolveFunction = resolve;\r\n  });\r\n  \r\n  const alert = await this.alertController.create({\r\n    header: 'Registration Error',\r\n    message: errorMessage,\r\n    buttons: [\r\n      {\r\n        text: 'OK',\r\n          handler: () => resolveFunction(true)\r\n      }\r\n    ]\r\n  });\r\n\r\n  await alert.present();\r\n  return promise;\r\n}\r\n\r\npublic async presentEmailConfirmation(message) : Promise<boolean> {\r\n  let resolveFunction: (confirm: boolean) => void;\r\n  const promise = new Promise<boolean>(resolve => {\r\n    resolveFunction = resolve;\r\n  });\r\n  \r\n  const alert = await this.alertController.create({\r\n    header: 'Email Confirmation',\r\n    message: message,\r\n    buttons: [\r\n      {\r\n        text: 'OK',\r\n          handler: () => resolveFunction(true)\r\n      }\r\n    ]\r\n  });\r\n\r\n  await alert.present();\r\n  return promise;\r\n}\r\n\r\npublic async presentAlertCheck() : Promise<boolean> {\r\n  let resolveFunction: (confirm: boolean) => void;\r\n  const promise = new Promise<boolean>(resolve => {\r\n    resolveFunction = resolve;\r\n  });\r\n  \r\n  const alert = await this.alertController.create({\r\n    header: 'Confirm Navigation',\r\n    message: 'You are about to be navigated out of this application. Click OK to continue.',\r\n    buttons: [\r\n      {\r\n        text: 'OK',\r\n          handler: () => resolveFunction(true)\r\n      }\r\n    ]\r\n  });\r\n\r\n  await alert.present();\r\n  return promise;\r\n}\r\n\r\n  setPickupTime(pickupTime){\r\n    let date = new Date(pickupTime);  \r\n    this.pickupTime =  date.toString();\r\n  }\r\n\r\n}\r\n\r\n\r\n"]}