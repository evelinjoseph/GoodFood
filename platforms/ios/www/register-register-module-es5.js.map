{"version":3,"sources":["webpack:///src/app/register/register.page.html","webpack:///src/app/register/register-routing.module.ts","webpack:///src/app/register/register.module.ts","webpack:///src/app/register/register.page.scss","webpack:///src/app/register/register.page.ts"],"names":["routes","path","component","RegisterPageRoutingModule","imports","forChild","exports","RegisterPageModule","declarations","RegisterPage","nacCtrl","afAuth","afstore","alertController","firstname","lastname","email","password","cpassword","Error","length","createUserWithEmailAndPassword","res","doc","user","uid","set","isRetailer","cart","orders","userUID","navigateRoot","presentAlert","message","errorMessage","promise","Promise","resolve","resolveFunction","create","header","buttons","text","handler","alert","present","selector","template"],"mappings":"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","file":"register-register-module-es5.js","sourcesContent":["export default \"<ion-header style=\\\"text-align: center\\\">\\n  <ion-toolbar color=\\\"primary\\\" mode=\\\"ios\\\">\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-back-button [text]=\\\"Back\\\" defaultHref=\\\"initial-page\\\"></ion-back-button>\\n    </ion-buttons> \\n    <ion-title>\\n     Registration\\n    </ion-title>     \\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content padding>\\n  <br>\\n  <ion-list>\\n    <ion-item>\\n      <ion-label position = \\\"floating\\\">\\n          First Name\\n        </ion-label>\\n        <ion-input autocapitalize='sentences' type = \\\"text\\\" [(ngModel)]=\\\"firstname\\\"></ion-input>\\n    </ion-item>\\n    <br>\\n    <ion-item>\\n      <ion-label position = \\\"floating\\\">\\n          Last Name\\n        </ion-label>\\n        <ion-input autocapitalize='sentences' type = \\\"text\\\" [(ngModel)]=\\\"lastname\\\"></ion-input>\\n    </ion-item>\\n    <br>\\n  <ion-item>\\n    <ion-label position = \\\"floating\\\">\\n        Email Address\\n      </ion-label>\\n      <ion-input type = \\\"text\\\" [(ngModel)]=\\\"email\\\"></ion-input>\\n  </ion-item>\\n  <br>\\n  <ion-item>\\n    <ion-label position = \\\"floating\\\">\\n        Password\\n      </ion-label>\\n      <ion-input type=\\\"password\\\" [(ngModel)]=\\\"password\\\"></ion-input>\\n  </ion-item>\\n  <br>\\n  <ion-item>\\n    <ion-label position = \\\"floating\\\">\\n      Confirm Password\\n    </ion-label>\\n    <ion-input type=\\\"password\\\" [(ngModel)]=\\\"cpassword\\\"></ion-input>\\n</ion-item>\\n</ion-list>\\n  \\n<div style=\\\"text-align: center\\\">\\n  <br>\\n<ion-button fill=\\\"solid\\\" Size = \\\"large\\\" color=\\\"primary\\\" (click)=\\\"register()\\\">Sign Up</ion-button>\\n</div>\\n</ion-content>\\n\\n\\n\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { RegisterPage } from './register.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: RegisterPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class RegisterPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { RegisterPageRoutingModule } from './register-routing.module';\n\nimport { RegisterPage } from './register.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RegisterPageRoutingModule\n  ],\n  declarations: [RegisterPage]\n})\nexport class RegisterPageModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3JlZ2lzdGVyL3JlZ2lzdGVyLnBhZ2Uuc2NzcyJ9 */\";","import { Component, OnInit } from '@angular/core';\nimport { AngularFirestore } from '@angular/fire/firestore'\nimport { AngularFireAuth } from '@angular/fire/auth';\nimport {  AlertController , NavController } from '@ionic/angular';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.page.html',\n  styleUrls: ['./register.page.scss'],\n})\nexport class RegisterPage implements OnInit {\n\n  firstname: string = \"\";\n  lastname: string = \"\";\n  email: string = \"\";\n  password: string = \"\";\n  cpassword: string = \"\";\n\n  constructor(private nacCtrl: NavController, public afAuth: AngularFireAuth, public afstore: AngularFirestore, public alertController: AlertController) { }\n\n  ngOnInit() {\n  }\n\n  async register() {\n   try{\n      const { firstname, lastname, email, password, cpassword} = this\n      if(password !== cpassword){      \n        throw new Error('Passwords Do Not Match');\n      } \n      if(firstname.length==0){\n        throw new Error('Please Enter First Name');\n      }\n      if(lastname.length==0){\n        throw new Error('Please Enter Last Name');\n      }\n      const res = await this.afAuth.createUserWithEmailAndPassword(email, password)\n      this.afstore.doc(`users/${res.user.uid}`).set({\n        email,\n        firstname,\n        lastname,\n        password,\n        isRetailer: false,\n        cart: [],\n        orders: [],\n        userUID: res.user.uid\n      })\n\n    this.nacCtrl.navigateRoot([\"./tabs/tabs/tab1\"])\n  }catch(error){\n    this.presentAlert(error.message);\n  }\n}\n  public async presentAlert(errorMessage) : Promise<boolean> {\n    let resolveFunction: (confirm: boolean) => void;\n    const promise = new Promise<boolean>(resolve => {\n      resolveFunction = resolve;\n    });\n    \n    const alert = await this.alertController.create({\n      header: 'Registration Error',\n      message: errorMessage,\n      buttons: [\n        {\n          text: 'OK',\n            handler: () => resolveFunction(true)\n        }\n      ]\n    });\n\n    await alert.present();\n    return promise;\n  }\n}"]}